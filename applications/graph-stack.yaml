apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: graph-stack
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  source:
    repoURL: https://github.com/YOUR-USERNAME/graphserver.git
    targetRevision: HEAD
    path: .
    directory:
      recurse: true
      include: "{neo4j/**,frontend/**,schema/**}"
  destination:
    server: https://kubernetes.default.svc
    namespace: graph-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: v1
kind: Namespace
metadata:
  name: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
# Neo4j Database Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: neo4j
  namespace: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  serviceName: neo4j
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5.15-community
        ports:
        - containerPort: 7474
          name: http
        - containerPort: 7687
          name: bolt
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: neo4j-auth
              key: password
              optional: false
        - name: NEO4J_PLUGINS
          value: '["apoc"]'
        - name: NEO4J_apoc_export_file_enabled
          value: "true"
        - name: NEO4J_apoc_import_file_enabled
          value: "true"
        - name: NEO4J_apoc_import_file_use__neo4j__config
          value: "true"
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        - name: neo4j-logs
          mountPath: /logs
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        readinessProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 60
          periodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: neo4j-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
  - metadata:
      name: neo4j-logs
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
---
# Neo4j Service
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  selector:
    app: neo4j
  ports:
  - name: http
    port: 7474
    targetPort: 7474
  - name: bolt
    port: 7687
    targetPort: 7687
  type: ClusterIP
---
# Schema Setup Job - runs after Neo4j is ready
apiVersion: batch/v1
kind: Job
metadata:
  name: schema-setup
  namespace: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/hook: PostSync
spec:
  template:
    spec:
      containers:
      - name: schema-setup
        image: neo4j:5.15-community
        command: ["/bin/bash"]
        args:
        - "-c"
        - |
          # Wait for Neo4j to be ready
          until cypher-shell -a bolt://neo4j:7687 -u neo4j -p $NEO4J_PASSWORD "RETURN 1"; do
            echo "Waiting for Neo4j to be ready..."
            sleep 5
          done
          
          # Apply schema
          cypher-shell -a bolt://neo4j:7687 -u neo4j -p $NEO4J_PASSWORD < /schema/graph-schema.cypher
          echo "Schema applied successfully"
        env:
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: neo4j-auth
              key: password
        volumeMounts:
        - name: schema
          mountPath: /schema
          readOnly: true
      volumes:
      - name: schema
        configMap:
          name: graph-schema
      restartPolicy: OnFailure
---
# Graph Schema ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: graph-schema
  namespace: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "1"
data:
  graph-schema.cypher: |
    // Graph Schema for Jira-GitHub Relationship Mapping
    // Create constraints for Jira entities
    CREATE CONSTRAINT jira_issue_key IF NOT EXISTS FOR (i:Issue) REQUIRE i.key IS UNIQUE;
    CREATE CONSTRAINT jira_project_key IF NOT EXISTS FOR (p:Project) REQUIRE p.key IS UNIQUE;
    
    // Create constraints for GitHub entities
    CREATE CONSTRAINT github_issue_unique IF NOT EXISTS FOR (g:GitHubIssue) REQUIRE (g.repository, g.number) IS UNIQUE;
    CREATE CONSTRAINT github_pr_unique IF NOT EXISTS FOR (pr:PullRequest) REQUIRE (pr.repository, pr.number) IS UNIQUE;
    CREATE CONSTRAINT github_repo_unique IF NOT EXISTS FOR (r:Repository) REQUIRE r.full_name IS UNIQUE;
    CREATE CONSTRAINT github_org_unique IF NOT EXISTS FOR (o:GitHubOrganization) REQUIRE o.name IS UNIQUE;
    
    // Create constraints for shared entities
    CREATE CONSTRAINT user_name_unique IF NOT EXISTS FOR (u:User) REQUIRE u.name IS UNIQUE;
    CREATE CONSTRAINT technology_name_unique IF NOT EXISTS FOR (t:Technology) REQUIRE t.name IS UNIQUE;
    CREATE CONSTRAINT component_name_unique IF NOT EXISTS FOR (c:Component) REQUIRE c.name IS UNIQUE;
    CREATE CONSTRAINT processing_metadata_unique IF NOT EXISTS FOR (m:ProcessingMetadata) REQUIRE m.type IS UNIQUE;
    
    // Create performance indexes
    CREATE INDEX jira_issue_status IF NOT EXISTS FOR (i:Issue) ON (i.status);
    CREATE INDEX jira_issue_type IF NOT EXISTS FOR (i:Issue) ON (i.issueType);
    CREATE INDEX github_issue_state IF NOT EXISTS FOR (g:GitHubIssue) ON (g.state);
    CREATE INDEX github_pr_state IF NOT EXISTS FOR (pr:PullRequest) ON (pr.state);
    
    // Version tracking
    MERGE (schema:SchemaVersion {version: '1.0.0'})
    SET schema.created = datetime(),
        schema.description = 'Initial three-layer architecture schema',
        schema.layers = ['discrete_data', 'cross_reference', 'analysis'];
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graph-frontend
  namespace: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: graph-frontend
  template:
    metadata:
      labels:
        app: graph-frontend
    spec:
      containers:
      - name: frontend
        image: quay.io/YOUR-QUAY-USERNAME/graph-frontend:latest
        ports:
        - containerPort: 8080
        env:
        - name: NEO4J_URI
          value: "bolt://neo4j:7687"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: graph-frontend
  namespace: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  selector:
    app: graph-frontend
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
# Frontend Route
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: graph-frontend
  namespace: graph-system
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  to:
    kind: Service
    name: graph-frontend
  port:
    targetPort: 8080
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
