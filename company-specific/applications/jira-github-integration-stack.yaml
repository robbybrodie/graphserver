apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: jira-github-integration-stack
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/your-org/graphserver
    targetRevision: HEAD
    path: company-specific
  destination:
    server: https://kubernetes.default.svc
    namespace: graphserver
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
  revisionHistoryLimit: 10

---
apiVersion: v1
kind: Secret
metadata:
  name: jira-github-integration-secrets
  namespace: graphserver
type: Opaque
stringData:
  # JIRA Configuration
  jira-server: "https://your-jira-instance.atlassian.net"
  jira-username: "your-jira-username"
  jira-token: "your-jira-api-token"
  
  # GitHub Configuration
  github-token: "your-github-personal-access-token"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jira-github-integration-sa
  namespace: graphserver

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: graphserver
  name: jira-github-integration-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jira-github-integration-rolebinding
  namespace: graphserver
subjects:
- kind: ServiceAccount
  name: jira-github-integration-sa
  namespace: graphserver
roleRef:
  kind: Role
  name: jira-github-integration-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Service
metadata:
  name: jira-github-integration-metrics
  namespace: graphserver
  labels:
    app: jira-github-integration-etl
    component: company-specific
spec:
  selector:
    app: jira-github-integration-etl
    component: company-specific
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: jira-github-integration-monitor
  namespace: graphserver
  labels:
    app: jira-github-integration-etl
    component: company-specific
spec:
  selector:
    matchLabels:
      app: jira-github-integration-etl
      component: company-specific
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jira-github-integration-queries
  namespace: graphserver
data:
  validation-queries.cypher: |
    // Validation Queries for JIRA-GitHub Integration
    
    // 1. Count of items by type and status
    MATCH (j:JiraIssue)
    RETURN j.project as project, j.status as status, j.issueType as type, count(*) as count
    ORDER BY project, status, type;
    
    // 2. Cross-reference coverage
    MATCH (j:JiraIssue)
    WHERE j.project IN ['AAPRFE', 'ANSTRAT'] AND j.status IN ['Open', 'In Progress', 'New']
    OPTIONAL MATCH (j)-[:TRACKED_IN]->(g:GitHubIssue)
    RETURN j.project as project, 
           count(j) as total_strategic_items,
           count(g) as items_with_github_tracking,
           round(count(g) * 100.0 / count(j), 2) as tracking_percentage;
    
    // 3. Technology adoption analysis
    MATCH (t:Technology)<-[:INVOLVES]-(j:JiraIssue)
    WHERE j.status IN ['Open', 'In Progress', 'New']
    WITH t, count(j) as strategic_mentions
    OPTIONAL MATCH (t)<-[:INVOLVES]-(g:GitHubIssue)
    WHERE g.state = 'open'
    RETURN t.name as technology,
           strategic_mentions,
           count(g) as implementation_mentions,
           round(count(g) * 100.0 / strategic_mentions, 2) as implementation_ratio
    ORDER BY strategic_mentions DESC;
    
    // 4. Component impact analysis
    MATCH (c:Component)<-[:AFFECTS]-(j:JiraIssue)
    WHERE j.status IN ['Open', 'In Progress', 'New']
    WITH c, count(j) as strategic_impact
    OPTIONAL MATCH (c)<-[:IMPLEMENTS]-(r:GitHubRepository)<-[:BELONGS_TO]-(g:GitHubIssue)
    WHERE g.state = 'open'
    RETURN c.name as component,
           strategic_impact,
           count(DISTINCT r) as implementing_repos,
           count(g) as open_implementation_issues
    ORDER BY strategic_impact DESC;
    
    // 5. Orphaned strategic items (no GitHub tracking)
    MATCH (j:JiraIssue)
    WHERE j.project IN ['AAPRFE', 'ANSTRAT'] 
      AND j.status IN ['Open', 'In Progress', 'New']
      AND NOT (j)-[:TRACKED_IN]->(:GitHubIssue)
    RETURN j.key, j.summary, j.status, j.priority, j.components
    ORDER BY j.priority DESC, j.updated DESC
    LIMIT 20;

  analysis-queries.cypher: |
    // Analysis Queries for Strategic Planning
    
    // 1. Strategy execution pipeline
    MATCH path = (s:Strategy)-[:CONTAINS*]->(:Epic)-[:CONTAINS*]->(:Feature)
                 -[:REALIZED_BY]->(j:JiraIssue)-[:TRACKED_IN]->(g:GitHubIssue)
    RETURN s.title as strategy,
           length(path) as execution_depth,
           count(*) as fully_tracked_items;
    
    // 2. Implementation velocity by component
    MATCH (c:Component)<-[:AFFECTS]-(j:JiraIssue)-[:TRACKED_IN]->(g:GitHubIssue)
    WHERE j.updated >= datetime() - duration('P30D')
    RETURN c.name as component,
           count(j) as recent_strategic_activity,
           count(g) as recent_implementation_activity,
           avg(duration.between(j.created, g.created).days) as avg_implementation_lag_days;
    
    // 3. Cross-system reference quality
    MATCH (g:GitHubIssue)-[:ADDRESSES]->(j:JiraIssue)
    WITH g, j, 
         CASE 
           WHEN g.body CONTAINS j.key THEN 'explicit'
           WHEN toLower(g.body) CONTAINS toLower(j.summary) THEN 'implicit'
           ELSE 'weak'
         END as reference_quality
    RETURN reference_quality,
           count(*) as reference_count,
           round(count(*) * 100.0 / sum(count(*)) OVER (), 2) as percentage;

  monitoring-queries.cypher: |
    // Monitoring and Health Check Queries
    
    // 1. Data freshness check
    MATCH (j:JiraIssue)
    RETURN 'JIRA' as source,
           count(*) as total_items,
           max(j.lastSynced) as last_sync,
           duration.between(max(j.lastSynced), datetime()).hours as hours_since_sync;
    
    MATCH (g:GitHubIssue)
    RETURN 'GitHub' as source,
           count(*) as total_items,
           max(g.lastSynced) as last_sync,
           duration.between(max(g.lastSynced), datetime()).hours as hours_since_sync;
    
    // 2. Data quality metrics
    MATCH (j:JiraIssue)
    WHERE j.summary IS NULL OR j.summary = '' 
       OR j.status IS NULL OR j.status = ''
       OR j.project IS NULL OR j.project = ''
    RETURN 'JIRA Quality Issues' as metric, count(*) as count;
    
    MATCH (g:GitHubIssue)
    WHERE g.title IS NULL OR g.title = ''
       OR g.state IS NULL OR g.state = ''
       OR g.repository IS NULL OR g.repository = ''
    RETURN 'GitHub Quality Issues' as metric, count(*) as count;
    
    // 3. Relationship integrity
    MATCH (j:JiraIssue)-[r:TRACKED_IN]->(g:GitHubIssue)
    WHERE NOT (g)-[:ADDRESSES]->(j)
    RETURN 'Broken Bidirectional Links' as metric, count(r) as count;
