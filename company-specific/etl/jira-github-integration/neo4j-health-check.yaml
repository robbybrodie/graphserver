apiVersion: batch/v1
kind: Job
metadata:
  name: neo4j-health-check
  namespace: graphserver
  annotations:
    argocd.argoproj.io/sync-wave: "2"  # Run after Neo4j deployment but before ETL
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app: neo4j-health-check
        component: company-specific
    spec:
      restartPolicy: OnFailure
      containers:
      - name: neo4j-health-check
        image: neo4j:5.15-community
        command:
        - /bin/bash
        - -c
        - |
          echo "Waiting for Neo4j to be ready..."
          
          # Wait for Neo4j service to be available
          until nc -z neo4j 7687; do
            echo "Waiting for Neo4j service..."
            sleep 5
          done
          
          echo "Neo4j service is available, checking database connectivity..."
          
          # Test database connectivity and create initial schema if needed
          cypher-shell -a bolt://neo4j:7687 -u neo4j -p ${NEO4J_PASSWORD} \
            "CALL db.ping() YIELD success RETURN success;" || exit 1
          
          echo "Testing basic query functionality..."
          cypher-shell -a bolt://neo4j:7687 -u neo4j -p ${NEO4J_PASSWORD} \
            "RETURN 'Neo4j is ready for JIRA-GitHub integration' as status;" || exit 1
          
          echo "Checking if APOC plugin is available..."
          cypher-shell -a bolt://neo4j:7687 -u neo4j -p ${NEO4J_PASSWORD} \
            "CALL apoc.help('text') YIELD name RETURN count(name) as apoc_functions;" || {
            echo "WARNING: APOC plugin not available - some features may not work"
            exit 0
          }
          
          echo "Neo4j health check completed successfully!"
        env:
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: neo4j-auth
              key: NEO4J_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
apiVersion: batch/v1
kind: Job
metadata:
  name: jira-github-schema-setup
  namespace: graphserver
  annotations:
    argocd.argoproj.io/sync-wave: "2"  # Run after health check
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app: jira-github-schema-setup
        component: company-specific
    spec:
      restartPolicy: OnFailure
      containers:
      - name: schema-setup
        image: neo4j:5.15-community
        command:
        - /bin/bash
        - -c
        - |
          echo "Setting up JIRA-GitHub integration schema..."
          
          # Apply the schema from the mounted configmap
          cypher-shell -a bolt://neo4j:7687 -u neo4j -p ${NEO4J_PASSWORD} \
            --file /schema/jira-github-integration-schema.cypher || {
            echo "Schema setup failed, but continuing..."
            exit 0
          }
          
          echo "Schema setup completed successfully!"
        env:
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: neo4j-auth
              key: NEO4J_PASSWORD
        volumeMounts:
        - name: schema
          mountPath: /schema
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: schema
        configMap:
          name: jira-github-schema
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
